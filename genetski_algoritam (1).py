# -*- coding: utf-8 -*-
"""genetski_algoritam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/162HOoQ8NNNN9FYCP5GIHRNyjVK3nLtFb
"""

pip install gaft

# pip install gaft

import math


from gaft import GAEngine
from gaft.components import BinaryIndividual
from gaft.components import Population
from gaft.operators import RouletteWheelSelection
from gaft.operators import UniformCrossover
from gaft.operators import FlipBitMutation
from gaft.analysis.fitness_store import FitnessStore
from gaft.plugin_interfaces.analysis import OnTheFlyAnalysis


from .mpi import MPI_klasa

mpi = MPI_klasa()


individual_template = BinaryIndividual(ranges=[(-2, 2), (-2, 2)], eps=0.001)
population = Population(individual_template=individual_template, size=50)
population.init()


selection = RouletteWheelSelection()
crossover = UniformCrossover(pc=0.8, pe=0.25)
mutation = FlipBitMutation(pm=0.1)


gen_algo = GAEngine(population=population, selection=selection,
                  crossover=crossover, mutation=mutation,
                  analysis=[FitnessStore])


def fitness(indv):
    x, y = indv.solution   
    return x * x + y


class ConsoleOutput(OnTheFlyAnalysis):
    master_only = True
    interval = 20    

    def register_step(self, generacija, population, gen_algo):
        best_indv = population.best_indv(gen_algo.fitness)
        msg = 'Generacija: {}, best fitness: {:.3f}'.format(generacija, gen_algo.fmax)
        gen_algo.logger.info(msg)

for generacija in range(individual_template):
                trenutna_generacija = generacija

                if mpi.is_master:
                    best_indv = population.best_indv(fitness)
                else:
                    best_indv = None
                best_indv = mpi.bcast(best_indv)
                local_indvs = []
                local_size = mpi.split_size(population.size // 2)

                
                for _ in range(local_size):
                   
                   roditelji = self.selection.select(population, fitness=fitness)
                   djeca = crossover.cross(*roditelji)
                   dijete= [mtation.mutation(dijete) for dijete in djeca]
                   local_indvs.extend(djeca)

                indvs = mpi.merge_seq(local_indvs)
                indvs[0] = best_indv
                population.individuals = indvs


if '__main__' == __name__:
    gen_algo.run(ng=100):